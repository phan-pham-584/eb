#include "stm32f4xx.h"  
#include "adc.h"
#include "lcd.h"
#include "timer.h"
#include "led.h"
#include "button.h"
#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>


volatile uint8_t state = 1;
volatile bool active_state = false;
volatile uint8_t uno = 0x00; 
uint16_t adc_value = 0;
uint16_t adc_display = 0;

void gpio_clock_init(void) {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
}

void system_display() {
    static char adc_str[6];
    sprintf(adc_str, "%u", adc_value);

    if (active_state == 0) {
        LCD_SendCommand(0x01); // Clear LCD when vào lại
        LCD_SetCursor(1, 0);
        LCD_WriteString("System state: 1");
        LCD_SetCursor(2, 0);
        LCD_WriteString("ADC value: ");
        LCD_SetCursor(3, 0);
        LCD_WriteString("Gas state: ");
        active_state = 1;
        uno = 0;
    }

    if(adc_display >= 0X00FF) {
        LCD_SetCursor(2, 11);
        LCD_WriteString("    "); // clear old val
        LCD_SetCursor(2, 11);
        LCD_WriteString(adc_str);
        adc_display = 0;
    }


    if (adc_value < 1000 && uno == 0x00) {
        LCD_SetCursor(3, 11);
        LCD_SendData('0');
        led_on(0); // Blue
        led_off(1); led_off(2); led_off(3); led_off(4);
        Timer10_Stop();
        uno = 0x05;
    } else if (adc_value < 2000 && uno == 0x01) {
        LCD_SetCursor(3, 11);
        LCD_SendData('1');
        led_off(0); led_on(1); // Yellow
        led_off(2); led_off(3); led_off(4);
        Timer10_Stop();
        uno = 0x05;
    } else if (adc_value < 3000 && uno == 0x02) {
        LCD_SetCursor(3, 11);
        LCD_SendData('2');
        led_off(0); led_off(1); led_off(2); led_off(3); led_off(4);
        Timer10_SetFreqz(1000);
        uno = 0x05;
    } else if (adc_value >= 3000 && uno == 0x03) {
        LCD_SetCursor(3, 11);
        LCD_SendData('3');
        led_off(0); led_off(1); led_off(2); 
        led_on(3); led_on(4);
        Timer10_SetFreqz(500 - 400 * (adc_value - 3000) / 1000); 
        uno = 0x05;
    }
}

volatile bool button_pressed = 0;

void EXTI2_IRQHandler(void) {
    if (EXTI->PR & (1 << 2)) {
        EXTI->PR |= (1 << 2);
        button_pressed = true; // Set button pressed flag
        NVIC->ICER[0] = (1 << 8);
        }
    
}

volatile bool button_pressed2 = 0;

void EXTI3_IRQHandler(void) {
    if (EXTI->PR & (1 << 3)) {
        EXTI->PR |= (1 << 3);
        button_pressed2 = true; // Set button pressed flag
        NVIC->ICER[0] = (1 << 9); // Disable EXTI3

    }
}

void system_init(void) {
    gpio_clock_init();
    Timer2_Init();
    PB8_Init();
    Timer10_Init(1000);
    I2C1_GPIO_Init();
    I2C1_Init();
    LCD_Init();
    ADC1_Init();
    led_init();
    init_button();
    LCD_SendCommand(0x01);
    LCD_SetCursor(1, 0);
    LCD_WriteString("System init done");
    Delay_Timer2(1000);    
}

void enter_sleep_mode(void) {
    LCD_SetCursor(1, 0);
    LCD_WriteString("Enter sleep mode");
    Delay_Timer2(1000);

    // Đảm bảo không vào deep sleep
    SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;

    // Chỉ cho EXTI2 wake up
    NVIC->ISER[0] |= (1 << 8); // EXTI2
    NVIC->ISER[0] &= ~(1 << 9); // EXTI3

    __WFI(); // Vào ngủ, chờ EXTI2 đánh thức

    // Sau khi dậy, bật lại EXTI3 nếu cần
    NVIC->ISER[0] |= (1 << 9); // EXTI2
}


void system_reset(void) {
    state = 1;
    // 1. Xóa màn hình LCD (phần mềm)
    LCD_SendCommand(0x01);

    // 2. Reset GPIOA, GPIOB, GPIOC
    RCC->AHB1RSTR |= RCC_AHB1RSTR_GPIOARST;
    Delay_Timer2(1);
    RCC->AHB1RSTR &= ~RCC_AHB1RSTR_GPIOARST;
    
    RCC->AHB1RSTR |= RCC_AHB1RSTR_GPIOCRST;
    Delay_Timer2(1);
    RCC->AHB1RSTR &= ~RCC_AHB1RSTR_GPIOCRST;
    

    // 4. Reset ADC1
    RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;
    Delay_Timer2(1);
    RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;
    

    // 6. Reset SYSCFG (để EXTICR được thiết lập lại)
    RCC->APB2RSTR |= RCC_APB2RSTR_SYSCFGRST;
    Delay_Timer2(1);
    RCC->APB2RSTR &= ~RCC_APB2RSTR_SYSCFGRST;

    // 7. Tắt tất cả cấu hình ngắt ngoài
    EXTI->IMR = 0;
    EXTI->RTSR = 0;
    EXTI->FTSR = 0;
    EXTI->PR = 0xFFFFFFFF;

    // 8. Xóa cấu hình EXTI2 và EXTI3
    SYSCFG->EXTICR[0] &= ~(0xF << 8);  // EXTI2
    SYSCFG->EXTICR[0] &= ~(0xF << 12); // EXTI3

    // 9. Disable và clear pending EXTI IRQs
    NVIC->ICER[0] = (1 << 8);  // Disable EXTI2_IRQn (số 8)
    NVIC->ICER[0] = (1 << 9);  // Disable EXTI3_IRQn (số 9)
    NVIC->ICPR[0] = (1 << 8);  // Clear pending EXTI2_IRQn
    NVIC->ICPR[0] = (1 << 9);  // Clear pending EXTI3_IRQn

    LCD_SetCursor(1,0);
    LCD_WriteString("System reset done");
    Delay_Timer2(1000);
}

volatile uint8_t reset_count = 0;

int main(void) {
    system_init();
    while (1) {
        if (button_pressed) {
            Delay_Timer2(100);
            if(button_pressed) {
                button_pressed = false; // Reset button pressed flag
                state = (state + 1) % 2; // Toggle state
                active_state = false; // Reset active state
            }
            NVIC->ICPR[0] = (1 << 8);  // Clear pending EXTI2_IRQn
            NVIC->ISER[0] |= (1 << 8); // EXTI2
        }
        if (button_pressed2) {
            Delay_Timer2(100);
            if(button_pressed2) {
                button_pressed2 = false; // Reset button pressed flag
                system_reset();
                system_init();
                active_state = 0;
                adc_display = 0;
            }
        }
        switch (state) {
            case 0:
                enter_sleep_mode();
                break;
            case 1:
                if(adc_display) {
                    adc_value = ADC1_Read();
                    uno = adc_value / 1000;
                }
                adc_display++;
                system_display();
                break;
            default: 
                LCD_SetCursor(1,1);
                LCD_WriteString("Invalid state");
                break;
        }
    }
}
