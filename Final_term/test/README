#include "stm32f4xx.h"  
#include "adc.h"
#include "lcd.h"
#include "timer.h"
#include "led.h"
#include "button.h"
#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>

void system_reset_hw(void);

volatile uint8_t state = 1;
volatile bool active_state = false;
volatile uint8_t uno = 0x00; 
volatile uint16_t adc_value = 0;
volatile uint16_t adc_write = 0;
volatile bool init_state = false;

void gpio_clock_init(void) {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
}

void system_display() {

    if(init_state == 0) {
        // Enable Timer 10 clock
        RCC->APB2ENR |= RCC_APB2ENR_TIM10EN; // Enable Timer 10 clock
        TIM10->CR1 |= TIM_CR1_CEN; // Disable Timer 10

        //Enable GPIOB and GPIOC clocks
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // Enable GPIOB clock
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; // Enable GPIOC clock

        // Enable I2C1 clock
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; // Enable I2C1 clock

        // Enable ADC clock
        RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; // Enable ADC clock
        ADC1->CR2 |= ADC_CR2_ADON; // Enable ADC

        init_state = true;
    }

    static char adc_str[6];
    sprintf(adc_str, "%u", adc_value);

    if (active_state == 0) {
        LCD_SendCommand(0x01); // Clear LCD when vào lại
        LCD_SetCursor(1, 0);
        LCD_WriteString("System state: 1");
        LCD_SetCursor(2, 0);
        LCD_WriteString("ADC value: ");
        LCD_SetCursor(3, 0);
        LCD_WriteString("Gas state: ");
        active_state = 1;
        uno = 0;
    }

    if (adc_write == 0x0FFF) {
        LCD_SetCursor(2, 11);
        LCD_WriteString("    "); // clear old val
        LCD_SetCursor(2, 11);
        LCD_WriteString(adc_str);
        adc_write = 0X00;
    }

    if (adc_value < 1000 && uno == 0x00) {
        LCD_SetCursor(3, 11);
        LCD_SendData('0');
        led_on(0); // Blue
        led_off(1); led_off(2); led_off(3); led_off(4);
        Timer10_Stop();
        uno = 0x05;
    } else if (adc_value < 2000 && uno == 0x01) {
        LCD_SetCursor(3, 11);
        LCD_SendData('1');
        led_off(0); led_on(1); // Yellow
        led_off(2); led_off(3); led_off(4);
        Timer10_Stop();
        uno = 0x05;
    } else if (adc_value < 3000 && uno == 0x02) {
        LCD_SetCursor(3, 11);
        LCD_SendData('2');
        led_off(0); led_off(1); led_off(2); led_off(3); led_off(4);
        Timer10_SetFreqz(1000);
        uno = 0x05;
    } else if (adc_value >= 3000 && uno == 0x03) {
        LCD_SetCursor(3, 11);
        LCD_SendData('3');
        led_off(0); led_off(1); led_off(2); 
        led_on(3); led_on(4);
        Timer10_SetFreqz(500 - 400 * (adc_value - 3000) / 1000); 
        uno = 0x05;
    }
}

void system_stop(void) {
    if (active_state == 0) {
        LCD_SendCommand(0x01);
        LCD_SetCursor(1, 0);
        LCD_WriteString("System state: 0");
        led_on(2); // Red
        led_off(0); led_off(1); led_off(3); led_off(4);
        Timer10_Stop();
        active_state = 1;
        uno = 0;
        init_state = false;
    }
    if(init_state == 0) {
        // Reset Timer 10
        TIM10->CR1 &= ~TIM_CR1_CEN; // Disable Timer 10
        RCC->APB2ENR &= ~RCC_APB2ENR_TIM10EN; // Enable Timer 10 clock

        // Reset GPIOB and GPIOC
        RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOBEN; // Enable GPIOB clock

        // Reset I2C1
        RCC->APB1ENR &= ~RCC_APB1ENR_I2C1EN; // Enable I2C1 clock

        // Reset ADC
        ADC1->CR2 &= ~ADC_CR2_ADON; // Disable ADC
        RCC->APB2ENR &= ~RCC_APB2ENR_ADC1EN; // Enable ADC clock

        init_state = true;
    }
}

void EXTI1_IRQHandler(void) {
    if (EXTI->PR & (1 << 1)) {
        EXTI->PR |= (1 << 1);
        Delay_Timer2(300);
        if (GPIOA->IDR & (1 << 1)) {
            state = (state + 1) % 2;
            active_state = 0;
            uno = 0;
            init_state = false;
        }
    }
}

void EXTI2_IRQHandler(void) {
    if (EXTI->PR & (1 << 2)) {
        EXTI->PR |= (1 << 2);
        state = 2;
    }
}



void system_init(void) {
    gpio_clock_init();
    Timer2_Init();
    PB8_Init();
    Timer10_Init(1000);
    I2C1_GPIO_Init();
    I2C1_Init();
    LCD_Init();
    ADC1_Init();
    led_init();
    init_button();
    NVIC_EnableIRQ(EXTI1_IRQn);
    NVIC_EnableIRQ(EXTI2_IRQn);
    LCD_SendCommand(0x01);
}

int main(void) {
    system_init();
    while (1) {
        switch (state) {
            case 0:
                system_stop();
                break;
            case 1:
                system_display();
                if(adc_write == 0x00) {
                    adc_value = ADC1_Read();
                    uno = adc_value / 1000; // Reset uno to avoid repeated writes
                }
                adc_write ++; // Set flag to write ADC value
                break;
            case 2:
                break;
        }
    }
}
